{
	"entity": {
		"define": "$is_path(minecraft:entity/..)", //Defines what an entity file is
		"basic": [ "vanilla.entities", "documentation.components" ], //Links to var
		"extend": [
			//GENERAL
			{
				"recognize": "($is(id) or $contains(entity_type) or $is_path(../transformation/into))", //Describes where to use the new completions
				"method": "replace", //replace or append
				"propose": [ //What to propose
					{
						"function": "$parse_documentation(entities, string)"
					}
				] 
			},
			{
				"recognize": "$is(minecraft:entity)",
				"method": "append",
				"propose": [
					{
						"key": "do_not_upgrade",
						"type": "object"
					}
				]
			},
			{
				"recognize": "($contains(event) and $is_not(event) and $is_not(events))",
				"method": "replace",
				"propose": [
					{
						"key": "event",
						"type": "object"
					},
					{
						"key": "target",
						"type": "object"
					}
				]
			},
			{
				"recognize": "$is_type(event)",
				"method": "replace",
				"propose": [
					{
						"function": "$parse_file(minecraft:entity/events, string)",
						"type": "string"
					}
				]
			},

			//COMPONENTS
			{
				"recognize": "($is_path(minecraft:entity/components) or $is_path(minecraft:entity/component_groups/.))",
				"method": "replace",
				"propose": [
					{
						"function": "$parse_documentation(components, object, true)",
						"type": "object"
					}
				]
			},
			{
				"recognize": "($is_path(minecraft:entity/components/.) or $is_path(minecraft:entity/component_groups/./.))",
				"method": "replace",
				"propose": [
					{
						"function": "$get_component_args",
						"type": "object"
					}
				]
			},
			{
				"recognize": "($is_path(minecraft:entity/components/./.) or $is_path(minecraft:entity/component_groups/././.))",
				"method": "replace",
				"propose": [
					{
						"function": "$get_component_values",
						"type": "object"
					}
				]
			},

			//EVENTS
			{
				"recognize": "$is_path(../events)",
				"method": "replace",
				"propose": [
					{
						"function": "$parse_documentation(events, object, true)",
						"type": "object"
					}
				]
			},
			{
				"recognize": "$is_path(../events/.)",
				"method": "replace",
				"propose": [
					{
						"key": "add",
						"type": "object"
					},
					{
						"key": "remove",
						"type": "object"
					}
				]
			},
			{
				"recognize": "$is_path(../events/./.)",
				"method": "replace",
				"propose": [
					{
						"key": "component_groups",
						"type": "list"
					}
				]
			},
			{
				"recognize": "$is_path(../events/././component_groups)",
				"method": "replace",
				"propose": [
					{
						"function": "$next_list_index",
						"type": "object"
					}
				]
			},
			{
				"recognize": "$is_path(../events/././component_groups/.)",
				"method": "replace",
				"propose": [
					{
						"function": "$parse_file(minecraft:entity/component_groups, string)",
						"type": "string"
					}
				]
			}
		]
	},
	"loot_table": {
		"define": "$is_path(pools/..)",
		"basic": [ "vanilla.loot_tables" ],
		"extend": [
			{
				"recognize": "$is(pools)",
				"method": "replace",
				"propose": [
					{
						"function": "$next_list_index",
						"type": "object"
					}
				]
			},
			{
				"recognize": "$is_path(../pools/.)",
				"method": "replace",
				"propose": [
					{
						"key": "rolls",
						"type": "object"
					},
					{
						"key": "entries",
						"type": "list"
					},
					{
						"key": "conditions",
						"type": "list"
					}
				]
			},
			{
				"recognize": "$is(entries)",
				"method": "replace",
				"propose": [
					{
						"function": "$next_list_index",
						"type": "object"
					}
				]
			},
			{
				"recognize": "$is_path(../entries/.)",
				"method": "replace",
				"propose": [
					{
						"key": "type",
						"type": "object"
					},
					{
						"key": "name",
						"type": "object"
					},
					{
						"key": "weight",
						"type": "object"
					},
					{
						"key": "quality",
						"type": "object"
					},
					{
						"key": "functions",
						"type": "list"
					},
					{
						"key": "pools",
						"type": "list"
					}
				]
			},
			{
				"recognize": "$is_path(../entries/functions)",
				"method": "replace",
				"propose": [
					{
						"function": "$next_list_index",
						"type": "object"
					}
				]
			},
			{
				"recognize": "$is_path(../entries/functions/.)",
				"method": "replace",
				"propose": [
					{
						"key": "function",
						"type": "object"
					},
					{
						"key": "chance",
						"type": "object"
					}
				]
			}
		]
	}
}